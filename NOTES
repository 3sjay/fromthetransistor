METAMETA: This project is about fun and learning. It is about the journey, NOT THE FUCKING DESTINATION. Enjoy yourself. If you aren't, stop and go weave baskets.

META: Perhaps this is project is what you've been thinking about. Moving past academic exercises, this is computing and why does it suck so bad?

Let's go slow and make the right decisions. Can we code in languages that are less likely to have bugs? i.e. avoid Python and C, think OCaml, Haskell, and Rust. Things worth learning, not trash you'll code fast than throw yourself at for days debugging. We are writing the whole stack, we have choices.

Am I just Urbit but a couple years late? TODO: Explore the Urbit stack.


What's changed is there's tons of compute in the world for compilation. Self hosting is an explicit non-goal. Compilers should do more "search" and "model", and less "translate".


Section 1:

Do the board in EAGLE, it's free for hobbyists
https://www.autodesk.com/products/eagle/free-download

FPGA Choice, Artix-7? Spartan-7? Ugh, all BGA
Spartan-6

Hmm, https://wiki.debian.org/FPGA/ says Lattice has an open toolchain

How many LUTs will we need, I think 10k+

I like ($34):
https://www.digikey.com/product-detail/en/xilinx-inc/XC7A35T-1FTG256C/122-1910-ND/5039074
33208 LUTs
1843200 bits of RAM = 225kb, should be enough. can swap on SD :)

It's BGA, but big pitch, should be doable on a two layer board, and overcome BGA fear.
Pin conpatible with up to 100k LUT.

For programming and serial ($12):
https://www.digikey.com/products/en?mpart=CY7C68013A-56PVXC&v=428
USB mini B

2x tricolor LED (one for each microcontroller)
SD card connector, need special hardware?

Ethernet PHY, MII Interface ($2.38)
https://www.digikey.com/product-detail/en/microchip-technology/KSZ8041TL/576-1619-ND/1534022

Jack with built in magnetics ($4.30)
https://www.digikey.com/product-detail/en/stewart-connector/SI-50170-F/380-1103-ND/1033369

Power over USB
Reset the FPGA over USB

Update: Can we find an FPGA dev board I can just buy? This should also all work in simulation, so we can start soon. Perhaps I can find something good in Shenzhen. Arty A7?

Update: Bought a http://em.avnet.com/s6microboard

Section 2:

We'll have to use Linux, there's no ISE for Mac.
Actually it looks like it's "Vivado" now.
Nope, ISE for Spartan 6, but Vivado for Artix 7

Update: Can we find something that works on Mac? Can we hack something? I really hate the bloated synth tools anyway. Or avoid Xilinx?


Section 3:

What's the minimal subset of ARM needed to be a decent processor? Based off Thumb? I don't think subleq is O(1) to real assembly languages. Turing machines aren't.

It's fine to implement instructions in "software" aka "microcode"

Also consider an LLVM machine. Is the LLVM spec nice?


Section 4:

Does that stuff make sense or is it legacy? The CompCert docs have an interesting take on what C is.



Section 5:

TODO: Read docs on microkernels.


